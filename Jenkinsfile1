pipeline {
    agent any

    environment {
        CLIENT_ID = '2b7ea5e9-cbab-4f60-97e3-32eaefeee768'
        CLIENT_SECRET = 'o0dwi8E0XMaYtX760LB05csjHeJoGHKldTi4R5x7NKwLMl25gYenpMAlRDerA6G1'
        JAMF_URL = 'https://dummy.jamfcloud.com'
    }


    stages {
        stage('Get Access Token') {
            steps {
                script {
                    // Obtain access token
                    def accessToken = getAccessToken(CLIENT_ID, CLIENT_SECRET, JAMF_URL)
                    
                    // Fetch data using the access token
                    fetchData(accessToken)
                    fetchId2(accessToken)
                  //  putId(accessToken)
                    fetchId(accessToken)
                }
            }
        }
    }
}

// Function to obtain access token
def getAccessToken(clientId, clientSecret, jamfUrl) {
    def response = sh(script: """
        curl -i -X 'POST' '${jamfUrl}/api/oauth/token' \\
        -H 'accept: application/x-www-form-urlencoded' \\
        -d 'grant_type=client_credentials&client_id=${clientId}&client_secret=${clientSecret}'
    """, returnStdout: true).trim()
    
    // Extract access token from response
    def accessToken = response =~ /"access_token":"([^"]+)"/
    
    if (accessToken) {
        return accessToken[0][1]
    } else {
        error "Failed to obtain access token"
    }
}

// Function to fetch data using access token
def fetchData(accessToken) {
    stage('Fetch Data') {
        script {
            def fetchDataResponse = sh(script: """
                curl -s -X GET -H 'Authorization: Bearer ${accessToken}' \\
                ${JAMF_URL}/api/v1/cloud-azure/defaults/server-configuration
            """, returnStdout: true).trim()
            
            echo "Fetched Data: ${fetchDataResponse}"
        }
    }
}
def fetchId(accessToken) {
    stage('Fetch Data') {
        script {
            def fetchDataResponse = sh(script: """
                curl -s -X GET -H 'Authorization: Bearer ${accessToken}' \\
                ${JAMF_URL}/api/v1/cloud-azure/1001
            """, returnStdout: true).trim()
            
            echo "Fetched Data: ${fetchDataResponse}"
        }
    }
}
def fetchId2(accessToken) {
    stage('Fetch Data') {
        script {
            def fetchDataResponse = sh(script: """
                curl -s -X GET -H 'Authorization: Bearer ${accessToken}' \\
                ${JAMF_URL}/api/v1/advanced-mobile-device-searches/211
            """, returnStdout: true).trim()
            
            echo "Fetched Data: ${fetchDataResponse}"
        }
    }
}
def putId(accessToken) {
    stage('Put Data') {
        script {
            def putDataResponse = sh(script: """
                curl -s -X PUT -H 'Content-Type: application/json' -H 'Authorization: Bearer ${accessToken}' \\
                ${JAMF_URL}/api/v1/cloud-azure/01 \\
                -d '{
                  "id" : "01",
                  "tenantId" : "",
                  "enabled" : true,
                  "migrated" : false,
                  "mappings" : {
                    "userId" : "id",
                    "userName" : "userPrincipalName",
                    "realName" : "displayName",
                    "email" : "mail",
                    "department" : "department",
                    "building" : "",
                    "room" : "",
                    "phone" : "mobilePhone",
                    "position" : "jobTitle",
                    "groupId" : "id",
                    "groupName" : "displayName"
                  },
                  "searchTimeout" : 30,
                  "transitiveMembershipEnabled" : false,
                  "transitiveMembershipUserField" : "userPrincipalName",
                  "transitiveDirectoryMembershipEnabled" : false,
                  "membershipCalculationOptimizationEnabled" : false
                }'
            """, returnStdout: true).trim()
            
            echo "Put Data: ${putDataResponse}"
        }
    }
    }